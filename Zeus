import java.util.ArrayList;
import java.security.KeyStore.Entry;
import java.util.*;
import java.util.HashMap;
//Multiply 2 int without using *
    // public static int multiply(int a ,int b){
    //    int sum=0;
    //    for(int i=0;i<b;i++){
    //     sum += a;
    //    }
    //    return sum;
    // }
    public class zeusPrep {
           Node head;
           Node tail;
           int size;
           zeusPrep(int size){
            this.size=size;
           }
        private class Node{
           int data;
           Node next;
           Node(int data){
            this.data=data;
        }
        Node(int data,Node next){
            this.data=data;
            this.next=next;
        }
        
        //insert at head
       
        }
        public void insertAttH(int data){
            Node node=new Node(data);
            node.next=head;
            head=node;
            if(tail == null){
                tail = head;

            }
            size += 1;
        }
        //display
        public void displayyyy(){
            Node temp=head;
            while(temp != null){
                System.out.print(temp.data+"->");
                temp=temp.next;
            }
            System.out.println("END");
        }
        //rectangle overlap
        public boolean isRectangleOverlap(int[] rec1, int[] rec2) {
            if(rec1[0]>=rec2[2] || rec2[0]>=rec1[2] || rec1[1]>=rec2[3] || rec2[1]>=rec1[3]){
                return false;
            }
            return true;
        }
    //reverse string
    public static void reverseString(String n){
        String revStr=" ";
        char ch;
        for(int i=0;i<n.length();i++){
            ch=n.charAt(i);
            revStr=ch+revStr;
        }
        System.out.print(revStr);
    }
    // reverse sentence
    public static void revSen(String m){
        String revsene=" ";
        String[] arr=m.split(" ");
        for(int i=arr.length-1;i>=0;i--){
           revsene=revsene+arr[i]+" ";
        }
        System.out.print(revsene);
    }
    public static void frequency(int[] arr){
        HashMap<Integer,Integer> freq=new HashMap<Integer,Integer>();
        for(int i=0;i<arr.length;i++){
            if(freq.containsKey(arr[i])){
                freq.put(arr[i], arr[i]+1);
            }else{
                freq.put(arr[i], 1);
            }

        }
        for(Map.Entry entry :freq.entrySet()){
         System.out.println(entry.getKey()+ " "+ entry.getValue());
        }
    }
    public static int max(int[] arr){
        int max=arr[0];
        for(int i=0;i<arr.length;i++){
        if(arr[i]>max){
            max=arr[i];
        }
        }
       return max;
    }
 public static int subAdd(int a,int b){
    int add=a+b;
    int sub=a-b;
    int c=add + sub;
    return add;
 }
 public static void ap(int n){
    for(int i=1;i<=n*2;i+=2){
        int j=1;
        j =j+i;
        System.out.println(j);
    }

 }
 
    public static void reverserArray(int[] arr){
        int start=0;
        int end=arr.length-1;
        while(start<end){
            //swap
           int temp=arr[start];
           arr[start]=arr[end];
           arr[end]=temp;
            start++;
            end--;
        }
    }
 public double angleClock(int hour, int minutes) {
    float h=(hour % 12 +(float)minutes/60 )*30;
    float m=minutes*6;
    float angle=Math.abs(h-m);
    if (angle>180){
        angle=360-angle;
    }
    return angle;
        }
        public static int integerfrmbinary(String str){
            double j=0;
            for(int i=0;i<str.length();i++){
                if(str.charAt(i)== '1'){
                 j=j+ Math.pow(2,str.length()-1-i);
             }
        
            }
            return (int) j;
        }
        public static void towerOfHenoi(int n,char src ,char aux ,char dest){
            if(n == 1){
                System.out.println(src +"-->"+ dest);
                return ;
            }
            towerOfHenoi(n-1, src, dest, aux);
            towerOfHenoi(1, src, aux, dest);
            towerOfHenoi(n-1, aux, src, dest);
        } 
        public static int binarySearch(int[] arr,int Target){
            int start=0;
            int end=arr.length-1;
            while(start<=end){
                int mid=start+(end-start)/2;
              if(Target>arr[mid]){
                start=mid+1;
              }else if(Target<arr[mid]){
                end=mid-1;
              }else{
                return mid;
              }
            }
            return -1;
        }
        public static void bubble(int[] arr){
            for(int i=0;i<arr.length-1;i++){
              for(int j=0;j<arr.length-i-1;j++){
               if(arr[j]>arr[j+1]){
                int temp=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=temp;
               }
              }
            }
        }
  

public static void main(String[] args){
    int[] arr={2,6,3,4,9,23,1,0};
    reverserArray(arr);
   System.out.println(Arrays.toString(arr));
}
}
    
    


